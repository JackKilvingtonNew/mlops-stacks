## =====================================================================================================================
## =====================================================================================================================
##  Data Product Application Build Script for AWS CodeBuild executed by AWS CodePipeline.
##
##  Tests, builds and publishes a Data Product Application artefact to an AWS CodeArtifact repository.
##
##  Inputs for this script are sourced from three locations:
##      1) AWS Secrets Manager (see secrets-manager key below)
##      2) AWS Parameter Store (see parameter-store key below)
##      3) AWS CodePipeline Environment Variables (see description immediately below)
##
##  Required AWS CodePipeline Environment Variables:
##      $codeartifact_domain:             the domain name of the AWS CodeArtifact repository e.g. edp
##      $codeartifact_domain_owner:       the AWS account ID for the owner of the AWS CodeArtifact domain e.g. 851725496338
##      $data_domain_name:                the name of the data domain within the Arqiva business e.g. utilities.
##      $product_fq_name:                 the fully qualified name for the data product, e.g. utilities-ntwk-covg-sdp
##      $product_local_name:              the local, or shorthand name of the data product e.g. ntwk-covg-sdp
##      $product_app_local_name:          the local, or shorthand name of the data product application e.g. ntwk-covg-sdp-etl
##      $region:                          the AWS region e.g. eu-west-2
##
##  Identifying what version of the artefact is to be built:
##    This script derives the version of the artefact to be built from the version value specified inside the
##    pyproject.toml file of the project.  It uses this value in outbound requests to AWS CodeArtifact to retrieve
##    this package version and deploy it accordingly.
##
##  AWS CodeBuild Reference Doc:
##      https://docs.aws.amazon.com/codebuild/latest/userguide/build-spec-ref.html
## =====================================================================================================================
## =====================================================================================================================

#TODO: update to work with mlops folder structure

version: 0.2

env:
  variables:
    common_repository_name: "product-common"
    poetry_version: 1.8.2

phases:
  install:
    runtime-versions:
      python: 3.11.0
    commands:
      - echo "[+] Installing Python Poetry"
      - pip install poetry==${poetry_version}

  pre_build:
    on-failure: ABORT
    commands:
      - |
        echo "[+] Identifying artefact version to build."
        poetry version --directory=domains/${data_domain_name}/${product_local_name}/app/${product_app_local_name}
        export ARTIFACT_NAME=$(poetry version --directory=domains/${data_domain_name}/${product_local_name}/app/${product_app_local_name} | awk '{print $1}')
        export ARTIFACT_VERSION=$(poetry version --directory=domains/${data_domain_name}/${product_local_name}/app/${product_app_local_name} | awk '{print $2}')
        echo "Identified ${ARTIFACT_NAME} with version ${ARTIFACT_VERSION} to build."
      - |
        echo "[+] Generating AWS CodeArtifact authorisation token"
        export REPO_TOKEN=$(aws codeartifact get-authorization-token \
          --domain-owner "${codeartifact_domain_owner}" \
          --domain "${codeartifact_domain}" \
          --query 'authorizationToken' \
          --output text)
      - |
        echo "[+] Configuring Python Poetry to use AWS CodeArtifact repository named ${product_fq_name} for publishing package versions to"
        poetry config repositories.${product_fq_name} \
          "https://${codeartifact_domain}-${codeartifact_domain_owner}.d.codeartifact.${region}.amazonaws.com/pypi/${product_fq_name}"
      - |
        echo "[+] Configuring Python Poetry to authenticate to ${product_fq_name} repository"
        poetry config http-basic.${product_fq_name} aws ${REPO_TOKEN}
      - |
        echo "[+] Configuring Python Poetry to authenticate to supplemental repository named ${common_repository_name} for downloading package versions from"
        poetry config http-basic.${common_repository_name} aws ${REPO_TOKEN}
      - |
        echo "[+] Copying the ${product_app} data product application files into the working directory root"
        cp -r domains/$data_domain_name/${product_local_name}/app/${product_app_local_name}/* "."
      - |
        echo "[+] Installing the ${product_app_local_name} data product application locally using Python Poetry"
        poetry install

  build:
    on-failure: ABORT
    commands:
      - |
        echo "[+] Running unit tests for the ${product_app} data product application"
        poetry run pytest -s tests --cov --cov-config=pyproject.toml --cov-report=xml --cov-report=html
      - |
        echo "[+] Building a Python wheel package"
        poetry build --format wheel

  post_build:
    commands:
      - |
        echo "[+] Publishing built Python wheel package for this data product application named ${product_app_local_name} to the AWS CodeArtifact repository named ${product_fq_name}"
        poetry -vvv publish -r ${product_fq_name} --skip-existing
      - echo "[+] Package ${ARTIFACT_NAME} with version ${ARTIFACT_VERSION} has been published to the ${product_fq_name} AWS CodeArtifact repository."
      - |
        echo "Build of ${ARTIFACT_NAME} version ${ARTIFACT_VERSION} completed on $(date)."

cache:
  paths:
    - '/root/.cache/pip'